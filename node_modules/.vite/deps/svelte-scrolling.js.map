{
  "version": 3,
  "sources": ["../../svelte-scrolling/dist/store/index.js", "../../svelte-scrolling/dist/internal/globalOptions.js", "../../svelte-scrolling/dist/shared/utils.js", "../../svelte-scrolling/dist/shared/smoothScroll.js", "../../svelte-scrolling/dist/shared/scrolling.js", "../../svelte-scrolling/dist/actions/ScrollTo.js", "../../svelte-scrolling/dist/actions/ScrollRef.js", "../../svelte-scrolling/dist/functions/scrolling.js"],
  "sourcesContent": ["import { writable } from 'svelte/store';\nimport { cubicInOut } from 'svelte/easing';\nexport const elements = writable([]);\nexport const globalOptions = writable({\n    offset: 0,\n    duration: 500,\n    passive: false,\n    easing: cubicInOut,\n    onStart: () => { },\n    onDone: () => { }\n});\n", "import { get } from 'svelte/store';\nimport { globalOptions } from '../store';\nconst globalOpts = get(globalOptions);\nexport const getGlobalOptions = () => {\n    return globalOpts;\n};\nexport const mergeGlobalOptions = (options) => {\n    return Object.assign({}, globalOpts, options);\n};\n/**\n * Override global options\n *\n * @param options - The global options\n */\nconst setGlobalOptions = (options) => {\n    globalOptions.update(() => Object.assign(globalOpts, options));\n};\nexport default setGlobalOptions;\n", "export const sanitize = (hash) => {\n    return hash\n        .replace(/[^A-Z0-9]/gi, '')\n        .toLowerCase();\n};\nexport const getElement = (elementsList, reference) => {\n    const element = elementsList.find(el => {\n        return el.reference === reference;\n    });\n    if (!element) {\n        return document.getElementById(reference);\n    }\n    return element.node;\n};\nexport const getPosition = (element) => {\n    return { y: element.offsetTop, x: element.offsetLeft };\n};\n", "const currentPosition = (start, end, elapsed, duration, easing) => {\n    if (elapsed > duration)\n        return end;\n    return start + (end - start) * easing(elapsed / duration);\n};\nconst smoothScroll = async (options, callback) => {\n    return new Promise((resolve) => {\n        const { start, end, duration, easing } = options;\n        const clock = Date.now();\n        let step = () => {\n            const elapsed = Date.now() - clock;\n            const positionX = currentPosition(start.x, end.x, elapsed, duration, easing);\n            const positionY = currentPosition(start.y, end.y, elapsed, duration, easing);\n            callback({ x: positionX, y: positionY });\n            if (elapsed > duration)\n                return resolve();\n            window.requestAnimationFrame(step);\n        };\n        window.addEventListener('wheel', function stopAnimation() {\n            step = () => { };\n            window.removeEventListener('wheel', stopAnimation);\n        });\n        window.requestAnimationFrame(step);\n    });\n};\nexport default smoothScroll;\n", "import smoothScroll from './smoothScroll';\nconst scrolling = async (coord, options) => {\n    const { duration, easing, offset } = options;\n    const startY = window.pageYOffset;\n    const startX = window.pageXOffset;\n    const endX = coord.x + offset;\n    const endY = coord.y + offset;\n    await smoothScroll({\n        start: {\n            x: startX,\n            y: startY\n        },\n        end: {\n            x: endX,\n            y: endY\n        },\n        duration,\n        easing\n    }, (coord) => {\n        window.scroll(coord.x, coord.y);\n    });\n};\nexport default scrolling;\n", "import { get } from 'svelte/store';\nimport { elements } from '../store';\nimport { getGlobalOptions } from '../internal/globalOptions';\nimport { sanitize, getElement, getPosition } from '../shared/utils';\nimport scrolling from '../shared/scrolling';\nconst elementsList = get(elements);\n// handle with scrolling\nconst handle = async (event, options) => {\n    if (!options.passive)\n        event.preventDefault();\n    const { ref, onDone, onStart } = options;\n    const duration = options.duration;\n    const offset = options.offset;\n    const easing = options.easing;\n    const element = getElement(elementsList, ref);\n    if (!element) {\n        throw new Error(`Element reference '${ref}' not found`);\n    }\n    const endPosition = getPosition(element);\n    onStart === null || onStart === void 0 ? void 0 : onStart({ element, offset, duration, endPosition });\n    await scrolling(endPosition, { duration, offset, easing });\n    onDone === null || onDone === void 0 ? void 0 : onDone({ element, offset, duration, endPosition });\n};\n/**\n * Listens for click (touchstart) events and scrolls to elements with smooth animation\n *\n * @param options - The element reference or global options\n */\nconst scrollTo = (node, options) => {\n    if (!options) {\n        throw new Error('scrollTo require a options');\n    }\n    let opts = Object.assign({ ref: '' }, getGlobalOptions());\n    typeof options === 'string'\n        ? (opts.ref = options)\n        : (opts = Object.assign(opts, options));\n    opts.ref = sanitize(opts.ref);\n    if (!opts.ref) {\n        throw new Error('scrollTo require a reference');\n    }\n    if (node instanceof HTMLAnchorElement) {\n        node.href = `#${opts.ref}`;\n    }\n    if (node instanceof HTMLAnchorElement === false) {\n        node.style.cursor = 'pointer';\n    }\n    const _handler = (event) => handle(event, opts);\n    node.addEventListener('click', _handler, { passive: opts.passive });\n    node.addEventListener('touchstart', _handler, { passive: opts.passive });\n    return {\n        destroy() {\n            node.removeEventListener('click', _handler);\n            node.removeEventListener('touchstart', _handler);\n        }\n    };\n};\nexport default scrollTo;\n", "import { get } from 'svelte/store';\nimport { sanitize } from '../shared/utils';\nimport { elements } from '../store';\n/**\n * Adds a reference to the elements that `scrollTo` should scroll\n *\n * @param reference - The reference element\n */\nconst scrollRef = (node, reference) => {\n    if (!reference) {\n        throw new Error('scrollRef require a reference');\n    }\n    const elementsList = get(elements);\n    elementsList.push({\n        node,\n        reference: sanitize(reference)\n    });\n    return {\n        destroy() {\n            elementsList.length = 0; // empty the elements list\n        }\n    };\n};\nexport default scrollRef;\n", "import { get } from 'svelte/store';\nimport { elements } from '../store';\nimport { mergeGlobalOptions } from '../internal/globalOptions';\nimport { getElement, getPosition, sanitize } from '../shared/utils';\nimport scrolling from '../shared/scrolling';\n/**\n * Scroll to a position on the page\n *\n * @param position - The position\n * @param options - An optional param with global options\n */\nexport const scrollPosition = async (position, options) => {\n    if (!position) {\n        throw new Error('scrollPosition require a position value valid');\n    }\n    if (typeof position === 'number') {\n        position = { x: 0, y: position };\n    }\n    const endPosition = position;\n    const _options = mergeGlobalOptions(options);\n    const { duration, offset, onStart, onDone } = _options;\n    onStart === null || onStart === void 0 ? void 0 : onStart({ offset, duration, endPosition });\n    await scrolling(endPosition, _options);\n    onDone === null || onDone === void 0 ? void 0 : onDone({ offset, duration, endPosition });\n};\n/**\n * Scroll to element\n *\n * @param reference - The element reference\n * @param options - An optional param with global options\n */\nexport const scrollElement = async (reference, options) => {\n    if (!reference || typeof reference !== 'string') {\n        throw new Error('scrollElement require a reference valid');\n    }\n    const ref = sanitize(reference);\n    const elementsList = get(elements);\n    const element = getElement(elementsList, ref);\n    if (!element) {\n        throw new Error(`Element reference '${ref}' not found`);\n    }\n    const endPosition = getPosition(element);\n    await scrollPosition(endPosition, mergeGlobalOptions(options));\n};\n/**\n * Scroll to the top of the page\n *\n * @param options - An optional param with global options\n */\nexport const scrollTop = async (options) => {\n    await scrollPosition({ x: 0, y: 0 }, mergeGlobalOptions(options));\n};\n/**\n * Scroll to the end of the page\n *\n * @param options - An optional param with global options\n */\nexport const scrollBottom = async (options) => {\n    const body = document.body;\n    const html = document.documentElement;\n    const endPosition = {\n        x: 0,\n        y: Math.max(body.scrollHeight, body.offsetHeight, html.scrollHeight, html.clientHeight, html.offsetHeight)\n    };\n    await scrollPosition(endPosition, mergeGlobalOptions(options));\n};\n/**\n * Scroll to the end of left the page\n *\n * @param options - An optional param with global options\n */\nexport const scrollLeft = async (options) => {\n    await scrollPosition({ x: 0, y: 0 }, mergeGlobalOptions(options));\n};\n/**\n * Scroll to the end of right the page\n *\n * @param options - An optional param with global options\n */\nexport const scrollRight = async (options) => {\n    const body = document.body;\n    const html = document.documentElement;\n    const endPosition = {\n        x: Math.max(body.scrollWidth, body.offsetWidth, html.scrollWidth, html.clientWidth, html.offsetWidth),\n        y: 0\n    };\n    await scrollPosition(endPosition, mergeGlobalOptions(options));\n};\n"],
  "mappings": "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",
  "names": ["elementsList", "coord", "elementsList", "elementsList"]
}
